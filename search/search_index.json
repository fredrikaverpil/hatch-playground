{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hatch-playground","title":"\ud83d\ude36\u200d\ud83c\udf2b\ufe0f hatch-playground","text":"<p>Python project boilerplate;</p> <ul> <li>Hard-pinned production dependencies via <code>requirements.txt</code> (and pip-tools), managed via dependabot or renovate.</li> <li>Lenient developer/CI dependencies management in <code>pyproject.toml</code>.</li> <li>Uses the hatchling build system (part of Hatch).</li> <li>Uses version management control via git tags (hatch-vcs).</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#install-project-locally","title":"Install project locally","text":"<p>In an activated virtual environment, run:</p> <pre><code># install/update project's production and developer dependencies\npip install --upgrade --requirement=requirements.txt --editable='.[dev]'\n</code></pre> <p>\u261d\ufe0f use this command from time to time to keep your local development environment's dependencies fresh.</p>"},{"location":"#build-project","title":"Build project","text":"<p>Use pypa/build:</p> <pre><code># requires that you ran `pip install ... --editable='[dev]'`\n# so that the PEP-517 build frontend is available\n# OR for a minimal setup, run: \"pip install build\" prior to running this command\npython -m build\n</code></pre> <p>Instead of using pypa/build, pip can be used:</p> <pre><code>pip wheel --no-deps --use-pep517 --wheel-dir=dist .\n</code></pre>"},{"location":"#release","title":"Release","text":"<p>Since this project uses VCS (git) to determine the package version, first make a git tag (following the PEP-440 standard), then build the project:</p> <pre><code>git tag v0.1.0\npython -m build\n</code></pre> <p>\ud83c\udf51 for continuous deployments, have CI create the tag based on incremental numbering or conventional commits.</p>"},{"location":"#publish","title":"Publish","text":"<p>I'm using gh-action-pypi-publish in CI, which triggers on pushed tag.</p>"},{"location":"#maintaining-the-dependencies","title":"Maintaining the dependencies","text":"<p>I've opted for hard-pinning all my production dependencies but allowing a more lenient approach for development dependencies.</p> <p>\ud83c\udf4e If you're building a library or have no need to hard-pin all your production dependencies (maybe you just want to pin the top-level ones), you may want to skip hatch-requirements-txt/pip-tools and just define the dependencies directly in <code>pyproject.toml</code>.</p>"},{"location":"#required-dependencies","title":"Required dependencies","text":"<p>Pip-tools is used to manage all production dependencies. Edit <code>requirements.in</code>, then generate the <code>requirements.txt</code> by running the following command:</p> <pre><code>pip-compile\n</code></pre> <p>Dependabot supports pip-tools and can be set up to prompt for updating these dependencies, one by one.</p>"},{"location":"#optional-dependencies","title":"Optional dependencies","text":"<p>Different dependency groups are specified in <code>pyproject.toml</code> under <code>[project.optional-dependencies]</code>.</p> <p>These can be installed by CI or (optionally) in development. Example, where we make sure we constrain the production dependencies to the pinned ones:</p> <pre><code>pip install --upgrade --requirement=requirements.txt --editable='.[tests]'\npip install --upgrade --requirement=requirements.txt --editable='.[docs]'\npip install --upgrade --requirement=requirements.txt --editable='.[lint]'\n# and so on...\n</code></pre> <p>\ud83c\udf4c it's likely a good idea to range-pin some important development dependencies to their major versions.</p> <p>Update these dependencies manually from time to time, if you pin them in any way. Check what is outdated using pip:</p> <pre><code>pip list --outdated\n</code></pre> <p>CI should fail tests etc if some optional dependency is acting up. Then pin this dependency to a working version and track the issue until it can be unpinned again.</p>"},{"location":"#background","title":"Background","text":"<p>Why does anyone need this?</p> <p>I've used Poetry extensively for the last couple of years both for open source and internal/proprietary applications and libraries. There is a considerable amount of churn over time with developer dependencies if you maintain many projects. Especially since I average around 30 developer/CI dependencies per Python repository.</p> <p>This whole project started as a result of Poetry not allowing you to specify unpinned dependencies, or range-pin dependencies.</p> <p>Therefore I created poetry-update, a project which aims to easen the dependabot fatigue for (developer-) dependencies that change often, and where you likely want to always use the latest and greatest. However, this is like a bandaid for a somewhat inflexible dependency management system in my opinion.</p> <p>Because of this, I set out to see what can be offered by the packaging community outside of the Poetry ecosystem.</p> <p>Unfortunately, Python does not yet have an accepted PEP specifying a lockfile mechanism to go with <code>pyproject.toml</code> that pip would use out of the box. But with Hatchling, the Hatch backend system, it seems I can finally achieve dependency updating zen in the meantime.</p>"},{"location":"mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/#editing-tips","title":"Editing tips","text":"<p>Make good use of admonitions for increased readability and a nice appearance.</p>"}]}